From 918ab2afe0dd89ea35aaa3e3d68e83ce4c1d86fd Mon Sep 17 00:00:00 2001
From: Lovee93 <lovee.jain93@gmail.com>
Date: Wed, 15 Apr 2020 13:21:27 +1000
Subject: [PATCH] Creating a Patch File after changes

---
 src/DataManipulator.ts | 33 +++++++++++++++++++++++----------
 src/Graph.tsx          | 32 +++++++++++++++++++-------------
 2 files changed, 42 insertions(+), 23 deletions(-)

diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..c3383f3 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,33 @@
 import { ServerRespond } from './DataStreamer';
 
+//updating what we are exporting to streamer object that will be used as schema for our table(& view) in graph.tsx
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  price_abc: number,
+  price_def: number,
+  ratio: number,
   timestamp: Date,
+  upper_bound: number,
+  lower_bound: number,
+  trigger_alert: number | undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
+  static generateRow(serverResponds: ServerRespond[]): Row {
+    const priceABC = (serverResponds[0].top_ask.price + serverResponds[0].top_bid.price) / 2; //taking avg of ask and bid price for ABC
+    const priceDEF = (serverResponds[1].top_ask.price + serverResponds[1].top_bid.price) / 2; //taking avg of ask and bid price for DEF
+    const ratio = priceABC / priceDEF; //that's how we get our ratio
+    const upperBound = 1 + 0.1; //now we need to check our ratio against 10% threshold, i.e. our upper threshold is 1.1
+    const lowerBound = 1 - 0.1; // and lower is 0.9
+    return {
+      price_abc: priceABC,
+      price_def: priceDEF,
+      ratio,
+      timestamp: serverResponds[0].timestamp > serverResponds[1].timestamp ? serverResponds[0].timestamp : serverResponds[1].timestamp,
+      upper_bound: upperBound,
+      lower_bound: lowerBound,
+      trigger_alert: (ratio > upperBound || ratio < lowerBound) ? ratio : undefined, //so if the ratio crosses any of the threshold values, we see an alert
+      //and that's how the traders can identify their trading opportunity
+    };
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..635ccb6 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -21,12 +21,15 @@ class Graph extends Component<IProps, {}> {
   componentDidMount() {
     // Get element from the DOM.
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    //We need to update our schema as it dictates the Perspective's table view we want for our graph
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -35,24 +38,27 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
-      elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('view', 'y_line'); //make changes to accommodate schema, such as remove earlier column pivot of stock
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
-      elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+      elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]'); //adding new columns
+      elem.setAttribute('aggregates', JSON.stringify({ //we need to aggregates in order to deal with duplicate values
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
         timestamp: 'distinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([ //finally passing each row as an array of objects that could directly be used to generate table and then view
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
+      console.log(DataManipulator.generateRow(this.props.data))
     }
   }
 }
-- 
2.25.1.windows.1

